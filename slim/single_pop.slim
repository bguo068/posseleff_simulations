function (void)tryDefineConstant(string$ k, * v)
{
	if (!exists(k))
		defineConstant(k, v);
	return;
}

function (void)set_default_params(void)
{
	tryDefineConstant("L", 750000); // chromosome length in bp
	tryDefineConstant("selpos", asInteger(L / 3)); // selection position in bp
	tryDefineConstant("num_origins", 1); //how many genomes contains the selected mutation when selection starts.
	tryDefineConstant("N", 10000); // constant effective population size
	tryDefineConstant("h", 0.5); // dominant coefficient
	tryDefineConstant("s", 0.3); // selection coefficient
	tryDefineConstant("g_sel_start", 80); // time of selected mutation being introduced (generations ago --BACKWARD)
	tryDefineConstant("r", 6.67e-7); // recombinantion rate
	tryDefineConstant("outid", 1); // idx
	tryDefineConstant("max_restart", 100); // max number of restart
	tryDefineConstant("sim_selfing_rate", 0.0); // selfing rate
	tryDefineConstant("sim_selfing_g", 40); // selfing starting time
	tryDefineConstant("sim_relatedness", F); // whether simulate high relatedness
	tryDefineConstant("sim_relatedness_power", 0.0); // parameter1 for mapping relatedness to probability
	tryDefineConstant("sim_relatedness_delta", 0.01); // parameter2 for mapping relatedness to probability
	tryDefineConstant("sim_relatedness_g", 40); // generations ago to start simulate inbreeding via mating to relatives
	tryDefineConstant("sim_relatedness_bypass", 2); // bypass 1/x child for checking parents' relatedness
	tryDefineConstant("sim_relatedness_bypass_complement", 0); // 0 false, 1, true 
	tryDefineConstant("N0", 1000); // the effective population size at sampling time
	tryDefineConstant("g_ne_change_start", 200); // Ne change time (generations ago -- BACKWARD)
	tryDefineConstant("selection", ifelse(s != 0, T, F));
	return;
}

function (void)print_params(void)
{
	d = Dictionary();
	d.setValue("L", L);
	d.setValue("selpos", selpos);
	d.setValue("num_origins", num_origins);
	d.setValue("N", N);
	d.setValue("h", h);
	d.setValue("s", s);
	d.setValue("g_sel_start", g_sel_start);
	d.setValue("outid", outid);
	d.setValue("max_restart", max_restart);
	d.setValue("r", r);
	d.setValue("sim_selfing_rate", sim_selfing_rate);
	d.setValue("sim_selfing_g", sim_selfing_g);
	d.setValue("sim_relatedness", sim_relatedness);
	d.setValue("sim_relatedness_power", sim_relatedness_power);
	d.setValue("sim_relatedness_delta", sim_relatedness_delta);
	d.setValue("sim_relatedness_g", sim_relatedness_g);
	d.setValue("sim_relatedness_bypass", sim_relatedness_bypass);
	d.setValue("sim_relatedness_bypass_complement", sim_relatedness_bypass_complement);
	d.setValue("N0", N0);
	d.setValue("g_ne_change_start", g_ne_change_start);
	d.setValue("selection", selection);
	for (k in d.allKeys)
	{
		catn(c("PARAMETER", k, d.getValue(k)), sep='\t');
	}
	return;
}

initialize()
{
	set_default_params();
	print_params();
	
	// initialization
	initializeSLiMOptions(keepPedigrees=T);
	initializeTreeSeq();
	initializeMutationRate(0.0);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", h, "f", s); // balanced
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElement(g1, 0, L - 1);
	initializeRecombinationRate(r);
	
	// constant for internal use
	x = max(g_ne_change_start, g_sel_start+1);
	if(sim_relatedness) x = max(x, sim_relatedness_g + 10);
	if(sim_selfing_rate > 0.0) x = max(x, sim_selfing_g + 1);
	defineConstant("slim_total_generations", x);

	defineConstant("debug", F);
	
	// define global
	defineGlobal("restart_counter", 0);
}

//// method1
//s0 9999:10000 mateChoice()
//{
//	rel = individual.relatedness(sourceSubpop.individuals);
//	return weights * (rel^sim_relatedness_power + sim_relatedness_delta);
//}
////
// method2: time rescheduled (set default time range out of simulation window so is not used by default)
s0 10000:100001 modifyChild()
{
	// allow better migration into inbreeding simulation
	if (parent1.migrant | parent2.migrant)
		return T;
	
	// use this to let 50% of candicate pass without checking pedegree relatedness
	// so the Ne etimates are more stable.
	// Adding sim.cycle is to avoid structure of due to child.index itself
	
	// For example, if sim_relatedness_bypass == 4:
	// if sim_relatedness_bypass_complement == 0:  3/4 bypass; 1/4 go to assortative mating
	// if sim_relatedness_bypass_complement == 1:  1/4 bypass; 3/4 go to assortative mating
	mod = (child.index + sim.cycle) % sim_relatedness_bypass;
	bypass1 = (mod != 0) & (sim_relatedness_bypass_complement==0);
	bypass2 = (mod == 0) & (sim_relatedness_bypass_complement==1);
	
	if (bypass1 | bypass2)
		return T;
	
	prob = parent1.relatedness(parent2);
	if (prob >= 1.0 / sim_relatedness_power)
		return T;
	else
		return sample(c(T, F), size=1, replace=T, weights=c(sim_relatedness_delta, 1));
}

s3 10000 early () {
	p1.setSelfingRate(sim_selfing_rate);
}


1:10000 early()
{
	if (sim.cycle == 1)
	{
		// initialize pop size
		sim.addSubpop("p1", N);
		
		// control time window for assortative mating
		if (sim_relatedness)
		{
			community.rescheduleScriptBlock(s0, slim_total_generations - sim_relatedness_g + 1);
		}
		
		if (sim_selfing_rate > 0) {
			assert(slim_total_generations >= sim_selfing_g);
			community.rescheduleScriptBlock(s3, slim_total_generations - sim_selfing_g + 1, slim_total_generations - sim_relatedness_g + 1);
		}
	}
	g_ago = slim_total_generations - sim.cycle;
	
	// control populatio size
	if (g_ago <= g_ne_change_start)
	{
		t = g_ago; // generation ago
		Nt = (N / N0)^(t / g_ne_change_start) * N0; // calculate Nt
		p1.setSubpopulationSize(asInteger(Nt)); // set new population size
	}
}

1:10000 late()
{
	g_ago = slim_total_generations - sim.cycle;
	if (selection)
	{
		// add selection 
		if (g_ago == g_sel_start)
		{
			// save state
			sim.treeSeqOutput(paste("tmp_slim_state_single_pop_", outid, ".trees", sep=''));
			print(c('saved state:', paste("tmp_slim_state_single_pop_", outid, ".trees", sep='')));
			
			// add mutations
			sample(p1.genomes, num_origins).addNewDrawnMutation(m2, selpos);
		}
		
		// monitor and restart if needed
		else if (g_ago < g_sel_start)
		{
			mut = sim.mutationsOfType(m2);
			fixed = sum(sim.substitutions.mutationType == m2);
			if (fixed)
			{
				catn(c("DAF", slim_total_generations - sim.cycle, 1.0), sep='\t');
			}
			else if ((mut.size() != 1) & restart_counter < max_restart)
			{
				print("selected mutation lost; restarting...");
				sim.readFromPopulationFile(paste("tmp_slim_state_single_pop_", outid, ".trees", sep=''));
				setSeed(rdunif(1, 0, asInteger(2^62 - 1)));
				sample(p1.genomes, num_origins).addNewDrawnMutation(m2, selpos);
				restart_counter = restart_counter + 1;
			}
			else
			{
				catn(c("DAF", slim_total_generations - sim.cycle, sim.mutationFrequencies(p1, mut)), sep='\t');
			}
		}
	}
	
	// print trajectory of true popuation size
	if (g_ago > 0)
	{
		catn(c('True_Ne', slim_total_generations - sim.cycle - 1, p1.individualCount), sep='\t');
	}
	if (g_ago == 0)
	{
		sim.simulationFinished();
		catn(c("restart_counter", restart_counter), sep='\t');
		sim.treeSeqOutput(paste("tmp_slim_out_single_pop_", outid, ".trees", sep=''));
	}
}